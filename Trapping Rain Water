Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.
Example 1:
Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.

#CODE:

class Solution {
public:
    int trap(vector<int>& height) {
    int n = height.size();
    if (n == 0) return 0;
    
    int left = 0, right = n - 1;
    int left_max = 0, right_max = 0;
    int trapped_water = 0;
    
    while (left < right) {
        if (height[left] < height[right]) {
            if (height[left] >= left_max) {
                left_max = height[left];  // Update left_max
            } else {
                trapped_water += left_max - height[left];  // Calculate trapped water
            }
            left++;  // Move left pointer to the right
        } else {
            if (height[right] >= right_max) {
                right_max = height[right];  // Update right_max
            } else {
                trapped_water += right_max - height[right];  // Calculate trapped water
            }
            right--;  // Move right pointer to the left
        }
    }
    
    return trapped_water;
    }
};
